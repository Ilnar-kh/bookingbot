package com.bookingbot.bot;

import com.bookingbot.model.Booking;
import com.bookingbot.model.TimeSlot;
import com.bookingbot.service.AdminService;
import com.bookingbot.service.BookingService;
import com.bookingbot.service.TimeSlotService;
import com.bookingbot.session.UserSessionService;
import com.bookingbot.session.UserState;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.*;
import java.time.format.TextStyle;
import java.util.*;

@Component
public class Bot extends TelegramLongPollingBot {

    private final BookingService bookingService;
    private final UserSessionService sessionService;
    private final TimeSlotService timeSlotService;
    @Autowired
    private AdminService adminService;

    @Value("botToken")
    private String botToken;

    @Value("botUsername")
    private String botUsername;

    private final Set<Long> adminIds = Set.of(
            **********L // ‚Üê —Å—é–¥–∞ –≤–ø–∏—à–∏ —Å–≤–æ–π Telegram ID
    );


    @Autowired
    public Bot(BookingService bookingService, UserSessionService sessionService, TimeSlotService timeSlotService) {
        this.bookingService = bookingService;
        this.sessionService = sessionService;
        this.timeSlotService = timeSlotService;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long userId = update.getMessage().getChatId();
            String text = update.getMessage().getText();
            UserState state = sessionService.getState(userId);

            if (text.equals("/start")) {
                sessionService.clearSession(userId); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                handleStart(userId);    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
                return; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            }

            if (text.equals("/list")) {
                if (adminIds.contains(userId)) {
                    sessionService.setState(userId, UserState.ADMIN_VIEW_DATE);
                    sessionService.clearSession(userId);// —Å–±—Ä–æ—Å–∏–º –≤—Å—ë, –≤–¥—Ä—É–≥ –±—ã–ª–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    sessionService.setState(userId, UserState.ADMIN_VIEW_DATE);
                    System.out.println("üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞: " + userId + " is admin? " + adminIds.contains(userId));
                    sendAdminCalendar(userId); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                } else {
                    sendMessage(userId, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
                }
                return;
            }



            switch (state) {
                case START -> handleStart(userId);
                case SELECT_SERVICE -> handleServiceSelection(userId, text);
                case SELECT_DATE -> handleDateSelection(userId, text);
                case SELECT_TIME -> handleTimeSelection(userId, text);
                case INPUT_NAME -> handleNameInput(userId, text);
                case INPUT_PHONE -> handlePhoneInput(userId, text);
                case ADMIN_INPUT_NEW_TIME -> {
                    try {
                        LocalTime newTime = LocalTime.parse(text); // —Ñ–æ—Ä–º–∞—Ç HH:mm
                        Long slotId = sessionService.getEditingSlotId(userId);
                        timeSlotService.updateSlotTime(slotId, newTime); // —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∂–µ
                        sessionService.clearEditingSlotId(userId);
                        sessionService.setState(userId, UserState.IDLE); // –≤–µ—Ä–Ω—ë–º –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        sendMessage(userId, "‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
                    } catch (Exception e) {
                        sendMessage(userId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).");
                    }
                }

                case ADMIN_VIEW_DATE -> {
                    // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–µ–π—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ –≤–≤—ë–ª —Ä—É–∫–∞–º–∏ —Ç–µ–∫—Å—Ç
                    sendMessage(userId, "–í—ã –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å üìÖ.");
                }

                default -> sendMessage(userId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.");
            }
        } else if (update.hasCallbackQuery()) {
            CallbackQuery callback = update.getCallbackQuery();
            Long userId = callback.getMessage().getChatId();
            String data = callback.getData();

            if (data.equals("/list")) {
                if (adminIds.contains(userId)) {
                    sessionService.clearSession(userId);
                    sessionService.setState(userId, UserState.ADMIN_VIEW_DATE);
                    sendAdminCalendar(userId);
                } else {
                    sendMessage(userId, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.");
                }
                return;
            }

            // ‚úÖ –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É
            if (data.equals("CONFIRM_BOOKING")) {
                saveBooking(userId);
                return;
            } else if (data.equals("CANCEL_BOOKING")) {
                sessionService.clearSession(userId);
                sendMessage(userId, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –≤–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É.");
                return;
            }


            if (sessionService.getState(userId) == UserState.ADMIN_VIEW_DATE && data.matches("\\d{4}-\\d{2}-\\d{2}")) {
                LocalDate selectedDate = LocalDate.parse(data);
                showAdminSlotsForDate(userId, selectedDate);
                return;
            }

            // –î–∞–ª—å—à–µ ‚Äî –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if (data.equals("NEXT_MONTH") || data.equals("PREV_MONTH")) {
                sessionService.shiftCalendar(userId, data.equals("NEXT_MONTH") ? 1 : -1);
                sendDateCalendarKeyboard(userId);

            } else if (data.startsWith("EDIT_SLOT_")) {
                    Long slotId = Long.parseLong(data.replace("EDIT_SLOT_", ""));
                    sessionService.setEditingSlotId(userId, slotId);
                    sessionService.setState(userId, UserState.ADMIN_INPUT_NEW_TIME);
                    sendMessage(userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm:");
                    return;
                }

            if (data.startsWith("DELETE_SLOT_")) {
                Long slotId = Long.parseLong(data.replace("DELETE_SLOT_", ""));
                timeSlotService.deleteSlotById(slotId);
                sendMessage(userId, "–°–ª–æ—Ç —É–¥–∞–ª—ë–Ω.");
                sendAdminCalendar(userId);
                return;
            }

            if (sessionService.getState(userId) == UserState.SELECT_SERVICE) {
                handleServiceSelection(userId, data);
            } else if (data.matches("\\d{4}-\\d{2}-\\d{2}")) {
                if (sessionService.getState(userId) == UserState.ADMIN_VIEW_DATE) {
                    LocalDate selectedDate = LocalDate.parse(data);
                    showAdminSlotsForDate(userId, selectedDate); // üëà –≤—ã–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—é
                } else {
                    handleDateSelection(userId, data); // –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                }
                return;
            } else if (data.startsWith("TIME_")) {
                handleTimeSelection(userId, data.replace("TIME_", ""));
            }
        }
    }


    private void handleStart(Long userId) {
        sessionService.setState(userId, UserState.SELECT_SERVICE);
        SendMessage message = new SendMessage();
        message.setChatId(userId.toString());
        message.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\uD83D\uDC4B  \n" +
                "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å \uD83D\uDE0A  \n" +
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞:");

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(
                InlineKeyboardButton.builder().text("–°—Ç—Ä–∏–∂–∫–∞ \uD83D\uDC87").callbackData("–°—Ç—Ä–∏–∂–∫–∞ \uD83D\uDC87").build(),
                InlineKeyboardButton.builder().text("–ú–∞–Ω–∏–∫—é—Ä \uD83D\uDC85").callbackData("–ú–∞–Ω–∏–∫—é—Ä \uD83D\uDC85").build()
        ));
        rows.add(List.of(
                InlineKeyboardButton.builder().text("–ú–∞—Å—Å–∞–∂ \uD83D\uDC86").callbackData("–ú–∞—Å—Å–∞–∂ \uD83D\uDC86").build(),
                InlineKeyboardButton.builder().text("–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è \uD83D\uDC84").callbackData("–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è \uD83D\uDC84").build()
        ));

        if (adminService.isAdmin(userId)) {
            InlineKeyboardButton adminButton = new InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏");
            adminButton.setCallbackData("/list");
            rows.add(List.of(adminButton));
        }

        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(rows).build();
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleServiceSelection(Long userId, String service) {
        sessionService.setService(userId, service);
        sessionService.setState(userId, UserState.SELECT_DATE);
        sendMessage(userId, "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä: " + service + "\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ " +
                "\uD83D\uDCC5");
        sendDateCalendarKeyboard(userId);
    }

    private void sendDateCalendarKeyboard(Long userId) {
        try {
            LocalDate baseDate = sessionService.getCalendarOffset(userId);
            YearMonth yearMonth = YearMonth.from(baseDate);
            LocalDate firstDay = yearMonth.atDay(1);
            int shift = (firstDay.getDayOfWeek().getValue() + 6) % 7;

            String monthTitle = yearMonth.getMonth().getDisplayName(TextStyle.FULL_STANDALONE, new Locale("ru"));
            String capitalizedMonth = monthTitle.substring(0, 1).toUpperCase() + monthTitle.substring(1);
            int year = yearMonth.getYear();

            SendMessage message = new SendMessage();
            message.setChatId(userId.toString());
            message.setText("üìÖ " + capitalizedMonth + " " + year + "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—É:\n");

            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            rows.add(Arrays.stream(new String[]{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"})
                    .map(d -> InlineKeyboardButton.builder().text(d).callbackData("IGNORE").build())
                    .toList());

            List<InlineKeyboardButton> currentRow = new ArrayList<>();
            for (int i = 0; i < shift; i++) {
                currentRow.add(InlineKeyboardButton.builder().text(" ").callbackData("IGNORE").build());
            }

            int daysInMonth = yearMonth.lengthOfMonth();
            for (int day = 1; day <= daysInMonth; day++) {
                LocalDate currentDate = yearMonth.atDay(day);
                currentRow.add(InlineKeyboardButton.builder()
                        .text(String.valueOf(day))
                        .callbackData(currentDate.toString())
                        .build());
                if (currentRow.size() == 7) {
                    rows.add(currentRow);
                    currentRow = new ArrayList<>();
                }
            }
            if (!currentRow.isEmpty()) {
                while (currentRow.size() < 7) {
                    currentRow.add(InlineKeyboardButton.builder().text(" ").callbackData("IGNORE").build());
                }
                rows.add(currentRow);
            }

            rows.add(List.of(
                    InlineKeyboardButton.builder().text("¬´ –ü—Ä–µ–¥").callbackData("PREV_MONTH").build(),
                    InlineKeyboardButton.builder().text("–°–ª–µ–¥ ¬ª").callbackData("NEXT_MONTH").build()
            ));

            InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(rows).build();
            message.setReplyMarkup(markup);
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.");
        }
    }

    private void sendAdminCalendar(Long adminId) {
        sessionService.clearSession(adminId); // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–æ—Å
        sessionService.setState(adminId, UserState.ADMIN_VIEW_DATE); // –ü–æ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–µ–π—Ç–∞
        sendMessage(adminId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π üìÖ:");
        sendDateCalendarKeyboard(adminId);
    }



    private void handleDateSelection(Long userId, String dateStr) {
        try {

//            // ‚ùó –ê–¥–º–∏–Ω–æ–≤ –Ω–µ –ø—É—Å–∫–∞–µ–º –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
//            if (adminIds.contains(userId)) {
//                System.out.println("üö´ handleDateSelection –≤—ã–∑–≤–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞. –ü—Ä–µ—Ä—ã–≤–∞–µ–º.");
//                return;
//            }

            LocalDate date = LocalDate.parse(dateStr);
            sessionService.setDate(userId, date);
            sessionService.setState(userId, UserState.SELECT_TIME);
            sendAvailableTimeSlots(userId, date);
        } catch (Exception e) {
            sendMessage(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    private void handleTimeSelection(Long userId, String time) {
        sessionService.setTime(userId, time);
        sessionService.setState(userId, UserState.INPUT_NAME);
        sendMessage(userId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è ‚úç:\n");
    }

    private void handleNameInput(Long userId, String name) {
        sessionService.setName(userId, name);
        sessionService.setState(userId, UserState.INPUT_PHONE);
        sendMessage(userId, "–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \uD83D\uDCF1:\n");
    }

    private void handlePhoneInput(Long userId, String phone) {
        sessionService.setPhone(userId, phone);
        sessionService.setState(userId, UserState.CONFIRMATION);

        String summary = """
        üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:
        –£—Å–ª—É–≥–∞ üßæ: %s
        –î–∞—Ç–∞ üìÖ: %s
        –í—Ä–µ–º—è ‚è∞: %s
        –ò–º—è üë§: %s
        –¢–µ–ª–µ—Ñ–æ–Ω üìû: %s
        """.formatted(
                sessionService.getService(userId),
                sessionService.getDate(userId),
                sessionService.getTime(userId),
                sessionService.getName(userId),
                sessionService.getPhone(userId)
        );

        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        buttons.add(List.of(
                InlineKeyboardButton.builder().text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å").callbackData("CONFIRM_BOOKING").build(),
                InlineKeyboardButton.builder().text("‚ùå –û—Ç–º–µ–Ω–∞").callbackData("CANCEL_BOOKING").build()
        ));

        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboard(buttons)
                .build();

        sendMessage(userId, summary, markup);
    }


    public void sendMessage(Long UserId, String text) {
        SendMessage message = new SendMessage(UserId.toString(), text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendAvailableTimeSlots(Long userId, LocalDate date) {
        List<TimeSlot> slots = timeSlotService.getSlotsByDate(date);

        if (slots.isEmpty()) {
            sendMessage(userId, "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç üòî");
            return;
        }

        slots.sort(Comparator.comparing(TimeSlot::getTime));

        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        for (TimeSlot slot : slots) {
            String timeLabel = slot.getTime().toString();
            InlineKeyboardButton button = InlineKeyboardButton.builder()
                    .text(timeLabel)
                    .callbackData("TIME_" + timeLabel)
                    .build();
            buttons.add(List.of(button));
        }

        InlineKeyboardMarkup keyboard = InlineKeyboardMarkup.builder()
                .keyboard(buttons)
                .build();

        sendMessage(userId, "–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É ‚è∞: \n", keyboard);
    }

    private void showAdminSlotsForDate(Long adminId, LocalDate date) {
        List<TimeSlot> slots = timeSlotService.getAllSlotsByDate(date); // –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ
        if (slots.isEmpty()) {
            sendMessage(adminId, "üì≠ –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.");
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        slots.sort(Comparator.comparing(TimeSlot::getTime));

        for (TimeSlot slot : slots) {
            String timeText = slot.getTime().toString();
            String availability = slot.isAvailable() ? "üü¢ –°–≤–æ–±–æ–¥–µ–Ω" : "üî¥ –ó–∞–Ω—è—Ç";

            StringBuilder messageBuilder = new StringBuilder();
            messageBuilder.append("üïí –í—Ä–µ–º—è: ").append(timeText).append("\n");
            messageBuilder.append("–°—Ç–∞—Ç—É—Å: ").append(availability).append("\n");

            if (!slot.isAvailable()) {
                // –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç ‚Äî –Ω–∞–π–¥—ë–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                Optional<Booking> bookingOpt = bookingService.findByDateAndTime(date, slot.getTime());
                bookingOpt.ifPresent(booking -> {
                    messageBuilder.append("üë§ –ò–º—è: ").append(booking.getName()).append("\n");
                    messageBuilder.append("üìû –¢–µ–ª–µ—Ñ–æ–Ω: ").append(booking.getPhone()).append("\n");
                    messageBuilder.append("üßæ –£—Å–ª—É–≥–∞: ").append(booking.getServiceType()).append("\n");
                    messageBuilder.append("üóì –°–æ–∑–¥–∞–Ω–æ: ").append(booking.getCreatedAt().toLocalDate()).append("\n");
                });
            }

            // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
            List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
            buttons.add(List.of(
                    InlineKeyboardButton.builder().text("üóë –£–¥–∞–ª–∏—Ç—å").callbackData("DELETE_SLOT_" + slot.getId()).build(),
                    InlineKeyboardButton.builder().text("‚úè –ò–∑–º–µ–Ω–∏—Ç—å").callbackData("EDIT_SLOT_" + slot.getId()).build()
            ));

            InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(buttons).build();
            sendMessage(adminId, messageBuilder.toString(), markup);
        }
    }




    public void sendMessage(Long chatId, String text, InlineKeyboardMarkup markup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setReplyMarkup(markup);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void saveBooking(Long userId) {
        bookingService.createBooking(
                userId,
                sessionService.getService(userId),
                sessionService.getDate(userId),
                LocalTime.parse(sessionService.getTime(userId)), // –í–∞–∂–Ω–æ: time —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                sessionService.getName(userId),
                sessionService.getPhone(userId)
        );

        sendMessage(userId, "\uD83C\uDF89 –°–ø–∞—Å–∏–±–æ!  \n" +
                "–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ  \n" +
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.  \n" +
                "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄ\uFE0F\n");
        // üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        String adminNotification = """
            üì¢ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!
            üë§ –ò–º—è: %s
            üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s
            üßæ –£—Å–ª—É–≥–∞: %s
            üìÖ –î–∞—Ç–∞: %s
            ‚è∞ –í—Ä–µ–º—è: %s
            """.formatted(
                sessionService.getName(userId),
                sessionService.getPhone(userId),
                sessionService.getService(userId),
                sessionService.getDate(userId),
                sessionService.getTime(userId)
        );

        // –û—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        for (Long adminId : adminIds) {
            sendMessage(adminId, adminNotification);
        }

        sessionService.clearSession(userId);
    }

}
