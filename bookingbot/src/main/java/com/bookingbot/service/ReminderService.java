package com.bookingbot.service;

import com.bookingbot.bot.Bot;
import com.bookingbot.model.Booking;
import com.bookingbot.repository.BookingRepository;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;

@Service
public class ReminderService {

    private final BookingRepository bookingRepository;
    private final Bot bot;

    public ReminderService(BookingRepository bookingRepository, Bot bot) {
        this.bookingRepository = bookingRepository;
        this.bot = bot;
    }

    @Scheduled(fixedRate = 1 * 60 * 1000) // –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    public void sendReminders() {
        System.out.println("‚è∞ –ú–µ—Ç–æ–¥ sendReminders –≤—ã–∑–≤–∞–Ω");
        LocalDate today = LocalDate.now();
        LocalTime now = LocalTime.now();

        // –í—Ä–µ–º—è, –∑–∞ 2 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏
        LocalTime targetTime = now.plusHours(2);

        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∏—Å–∫–∞: ¬±2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        LocalTime targetStart = targetTime.minusMinutes(2);
        LocalTime targetEnd = targetTime.plusMinutes(2);
//        LocalTime targetStart = now.plusHours(2).minusMinutes(5); // –∏–Ω—Ç–µ—Ä–≤–∞–ª 5 –º–∏–Ω—É—Ç
//        LocalTime targetEnd = now.plusHours(2).plusMinutes(5);

        List<Booking> upcoming = bookingRepository.findBookingsForReminder(today, targetStart, targetEnd);

        for (Booking booking : upcoming) {
            try {
                String text = String.format("""
        üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!
        
        üìÖ –î–∞—Ç–∞: %s
        ‚è∞ –í—Ä–µ–º—è: %s
        üßæ –£—Å–ª—É–≥–∞: %s

        –ú—ã –∂–¥—ë–º –≤–∞—Å!
        """, booking.getBookingDate(), booking.getBookingTime(), booking.getServiceType());


                bot.sendMessage(booking.getUserId(), text); // –≥–¥–µ messageText ‚Äî —ç—Ç–æ String

                booking.setReminderSent(true); // —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
                bookingRepository.save(booking);
            } catch (Exception e) {
                e.printStackTrace(); // –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
            }
        }
    }
}
